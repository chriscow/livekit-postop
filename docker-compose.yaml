# Short answer: there are two related mechanisms.

# - .env auto-load (substitution): Docker Compose automatically reads a `.env` file that sits next to your `docker-compose.yaml` (here: `agent/.env`). Those values are used to resolve `${VAR}` placeholders in the compose file.
# - env_file (container env): Adding `env_file: .env` tells Compose to also inject the key/value pairs into the container’s environment at runtime, even if you don’t list each one under `environment:`.

# What we did:
# - We kept `${POSTGRES_*}` placeholders in `environment:` so Compose substitutes them from `.env` (or your shell) when building the service config.
# - We added `env_file: .env` so the same variables are also available inside the containers without listing them all.

# Precedence (highest to lowest):
# - `environment:` entries in `docker-compose.yaml`
# - `env_file` values
# - `ENV` in the Dockerfile
# - For substitution only: shell environment overrides `.env`

# How to use:
# 1. From `livekit-postop/` (project root):
#    - Ensure `.env` file exists with your secrets
#    - Edit `.env` with your API keys and database settings
# 2. Start: `docker compose up -d` (or `docker-compose up -d`)
#
#
services:
  traefik:
    image: traefik:v3.0
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      - --certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.letsencrypt.acme.storage=/acme/acme.json
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_acme:/acme
    restart: unless-stopped
  postgres:
    image: postgres:latest
    env_file:
      - .env.local
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  livekit-agent:
    build:
      context: ./agent
      args:
        - OPENAI_API_KEY=${OPENAI_API_KEY}
        - DEEPGRAM_API_KEY=${DEEPGRAM_API_KEY}
        - ELEVEN_API_KEY=${ELEVEN_API_KEY}
        - CARTESIA_API_KEY=${CARTESIA_API_KEY}
    command: python3 -m discharge.agents start
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - .env.local
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432

  postop:
    build:
      context: .
      dockerfile: Dockerfile
    labels:
      - traefik.enable=true
      - traefik.http.routers.postop.rule=Host(`postop.stampede.dev`)
      - traefik.http.routers.postop.entrypoints=websecure
      - traefik.http.routers.postop.tls.certresolver=letsencrypt
      - traefik.http.services.postop.loadbalancer.server.port=3000
    depends_on:
      - postgres
    restart: unless-stopped
    env_file:
      - .env.local
    environment:
      - NODE_ENV=production

volumes:
  postgres_data:
  traefik_acme:
